package opencv;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.Moments;
import org.opencv.videoio.VideoCapture;

import graphics.Renderer;

public class ObjRecognitionController
{
	
	// a timer for acquiring the video stream
	private ScheduledExecutorService timer;
	// the OpenCV object that performs the video capture
	private VideoCapture capture = new VideoCapture(1);
	// a flag to change the button behavior
	private boolean cameraActive;
	//an arraylist of the position of the queue ball across 10 frames with only a single contour
	private List<Point> cueValues = new ArrayList<>();
	
	private List<List<Double>> markerCalibrationPoints = new ArrayList<>();
	
	
	private int missedFrames = 0;
	private int stillFrames = 0;
	private int shotPrepFrames = 0;
		
	/**
	 * The action triggered by pushing the button on the GUI
	 */
	public void startCamera()
	{	
		
		if (!this.cameraActive)
		{
			// start the video capture
			this.capture.open(1);
			
			// is the video stream available?
			if (this.capture.isOpened())
			{
				this.cameraActive = true;
				
				// grab a frame every 33 ms (30 frames/sec)
				Runnable frameGrabber = new Runnable() {
					
					@Override
					public void run()
					{
						// effectively grab and process a single frame
						processFrame();
					}
				};
				
				this.timer = Executors.newSingleThreadScheduledExecutor();
				this.timer.scheduleAtFixedRate(frameGrabber, 0, 33, TimeUnit.MILLISECONDS);
			}
			else
			{
				// log the error
				System.err.println("Failed to open the camera connection...");
			}
		}
		else
		{
			// the camera is not active at this point
			this.cameraActive = false;
			
			// stop the timer
			this.stopAcquisition();
		}
	}
	
	private void calibrateCue(Mat maskedImage) {
		if(markerCalibrationPoints.size() == 10) {
			Renderer.calibrated = true;
			int num = markerCalibrationPoints.size();
			float temp = 0;
			for(int i = 0; i < markerCalibrationPoints.size(); i++) {
				float pos = (float) (markerCalibrationPoints.get(i).get(1)/markerCalibrationPoints.get(i).get(0));

				if(pos > 1.9f && pos < 2.1f) {
					temp += markerCalibrationPoints.get(i).get(0);
				} 
				else {
					num--;
				}
			}

			Renderer.marker_separation_constant = temp / num;
			setClosed();
			Renderer.initializeGame();
		}
		// init
		List<MatOfPoint> contours = new ArrayList<>();
		Mat hierarchy = new Mat();
		
		// find contours
		Imgproc.findContours(maskedImage, contours, hierarchy, Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_NONE);
		
		// if any contour exist...
		if (hierarchy.size().height > 0 && hierarchy.size().width > 0)
		{
			Moments image_m = Imgproc.moments(maskedImage, false);
			int imageX = (int) (image_m.get_m10() / image_m.get_m00());
			int imageY = (int) (image_m.get_m01() / image_m.get_m00());
			Point image_center = new Point(imageX, imageY);
			
			List<Point> marker_points = new ArrayList<>();
			// for each contour, display it in blue
			for (int i = 0; i >= 0; i = (int) hierarchy.get(0, i)[0])
			{

				
				//get bounding rectangle of each contour
				MatOfPoint2f contours_poly = new MatOfPoint2f();
				MatOfPoint2f  NewMtx = new MatOfPoint2f( contours.get(i).toArray() );
				Imgproc.approxPolyDP(NewMtx, contours_poly, 3d, true);
				MatOfPoint  new_poly = new MatOfPoint( contours_poly.toArray() );
				Rect r =  Imgproc.boundingRect(new_poly); 
				
				//check rectangle to see if it should be processed
				if((r.width * r.height) < 10000 && (r.width * r.height) > 1000) {
					Moments M = Imgproc.moments(contours.get(i), false);
					int cX = (int) (M.get_m10() / M.get_m00());
					int cY = (int) (M.get_m01() / M.get_m00());
					Point temp = new Point(cX, cY);
					if(temp.distance(image_center) < 500) {
						marker_points.add(temp);
					}
				}
			}
			if(marker_points.size() == 3) {
				List<Double> temp = new ArrayList<>();
				for(int i = 1; i < marker_points.size(); i++) {
					temp.add(marker_points.get(0).distance(marker_points.get(i)));
				}
				markerCalibrationPoints.add(temp);
			}
		}
	}

	/**
	 * Get a frame from the opened video stream (if any)
	 * 
	 * @return the {@link Image} to show
	 */
	private void processFrame()
	{
		Mat frame = new Mat();
		
		// check if the capture is open and the cue ball is stationary
		if (this.capture.isOpened() && !Renderer.cueMoving)
		{
			try
			{
				// read the current frame
				this.capture.read(frame);
				
				// if the frame is not empty, process it
				if (!frame.empty())
				{
					Mat blurredImage = new Mat();
					Mat hsvImage = new Mat();
					
					// remove some noise
					Imgproc.blur(frame, blurredImage, new Size(10, 10));
					
					// convert the frame to HSV
					Imgproc.cvtColor(blurredImage, hsvImage, Imgproc.COLOR_BGR2HSV);
					
					//if the cue is not located and the game has been calibrated look for the cue ball
					if(Renderer.cuePos == null && Renderer.calibrated) {
						analyzeForCueBall(hsvImage);
						
						if(cueValues.size() == 10) {
							calculateCuePos();
						}
					}
					
					//if the cue has been located OR the game hasn't been calibrated yet look for markers
					if(Renderer.cuePos != null || !Renderer.calibrated) {
						analyzeForMarkers(hsvImage);
					}
				}
			}
			catch (Exception e)
			{
				// log the (full) error
				System.err.print("Exception during the image elaboration...");
				e.printStackTrace();
			}
		}
	}
	
	private void calculateCuePos() {
		Point temp = new Point(0, 0);
		for (Point value : cueValues) {
	        temp.x += value.x;
	        temp.y += value.y; 
	    }
		temp.x /= cueValues.size();
		temp.y /= cueValues.size();
		Renderer.cuePos = temp;
		Renderer.statusLabel.setText("Aim...");
	}

	private void analyzeForCueBall(Mat hsvImage) {
		// init
		Mat mask = new Mat();
		Mat morphOutput = new Mat();
		
		// get thresholding values from the UI
		// remember: H ranges 0-180, S and V range 0-255
		Scalar minValues = new Scalar(107.4f, 35f, 226.0f);
		Scalar maxValues = new Scalar(129.9f, 86.6f, 255f);
		
		// threshold HSV image to select tennis balls
		Core.inRange(hsvImage, minValues, maxValues, mask);
		// show the partial output
		
		// morphological operators
		// dilate with large element, erode with small ones
		Mat dilateElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(24, 24));
		Mat erodeElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(12, 12));
		
		Imgproc.erode(mask, morphOutput, erodeElement);
		Imgproc.erode(morphOutput, morphOutput, erodeElement);
		
		Imgproc.dilate(morphOutput, morphOutput, dilateElement);
		Imgproc.dilate(morphOutput, morphOutput, dilateElement);
		
		// show the partial output
		
		// find the tennis ball(s) contours and show them
		this.findAndDrawCueBall(morphOutput);
	}
	
	private void analyzeForMarkers(Mat hsvImage) {
		// init
		Mat mask = new Mat();
		Mat morphOutput = new Mat();
		
		//hardcoded - eventually should be retrieved from the calibrator class
		Scalar minValues = new Scalar(30.5f, 53.5f, 121.3f);
		Scalar maxValues = new Scalar(50.8f, 96.7f, 185.5f);
		
		// threshold HSV image to select tennis balls
		Core.inRange(hsvImage, minValues, maxValues, mask);
		
		// morphological operators
		// dilate with large element
		Mat dilateElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(20, 20));
		
		Imgproc.dilate(mask, morphOutput, dilateElement);
		Imgproc.dilate(morphOutput, morphOutput, dilateElement);
		
		// find the tennis ball(s) contours and show them
		if(Renderer.calibrated) {
			this.findAndDrawBalls(morphOutput);
		}
		else {
			this.calibrateCue(morphOutput);
		}

	}
	
	/**
	 * Given a binary image containing one or more closed surfaces, use it as a
	 * mask to find and highlight the objects contours
	 * 
	 * @param maskedImage
	 *            the binary image to be used as a mask
	 * @param frame
	 *            the original {@link Mat} image to be used for drawing the
	 *            objects contours
	 * @return the {@link Mat} image with the objects contours framed
	 */
	private void findAndDrawBalls(Mat maskedImage)
	{
		// init
		List<MatOfPoint> contours = new ArrayList<>();
		Mat hierarchy = new Mat();
		
		// find contours
		Imgproc.findContours(maskedImage, contours, hierarchy, Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_NONE);
		
		// if any contour exist...
		if (hierarchy.size().height > 0 && hierarchy.size().width > 0)
		{
			ArrayList<Point> marker_points = new ArrayList<>();
			// for each contour, display it in blue
			for (int i = 0; i >= 0; i = (int) hierarchy.get(0, i)[0])
			{

				
				//get bounding rectangle of each contour
				MatOfPoint2f contours_poly = new MatOfPoint2f();
				MatOfPoint2f  NewMtx = new MatOfPoint2f( contours.get(i).toArray() );
				Imgproc.approxPolyDP(NewMtx, contours_poly, 3d, true);
				MatOfPoint  new_poly = new MatOfPoint( contours_poly.toArray() );
				Rect r =  Imgproc.boundingRect(new_poly); 
				
				//check rectangle to see if it should be processed
				if((r.width * r.height) < 10000 && (r.width * r.height) > 1000) {
					Moments M = Imgproc.moments(contours.get(i), false);
					int cX = (int) (M.get_m10() / M.get_m00());
					int cY = (int) (M.get_m01() / M.get_m00());
					Point temp = new Point(cX, cY);
					
					//potential markers must be within 5 marker separations of the cue
					if(temp.distance(Renderer.cuePos) < 5*Renderer.marker_separation_constant)
					{
						marker_points.add(temp);
					}
					//System.out.print("Cue Marker Center: (" + cX + ", " + cY + ")\n");
				}
			}
			
			//check for markers near cue
			if(Renderer.restPos == null && marker_points.size() > 1) {
				Point temp = findClosest(marker_points);
				if(temp != null) {
					Renderer.restPos = temp;
				}
				//System.out.print("RestPos: " + Renderer.restPos + "\n");

			}
			
			else if(Renderer.restPos != null && marker_points.size() > 1) {
				
				//enough stillFrames, ready to fire
				if(stillFrames >= 20 && !Renderer.stroke) {

					Renderer.statusLabel.setText("Shoot!");
					Point p = findClosest(marker_points);
					if(p != null) {
						if(shotPrepFrames >= 10) {
							Renderer.stroke_counter = 0;
							stillFrames = 0;
							missedFrames = 0;
							shotPrepFrames = 0;
							Renderer.restPos = null;
							Renderer.statusLabel.setText("Aim...");
						}
						else if(p.distance(Renderer.cuePos) < Renderer.restPos.distance(Renderer.cuePos)) {
							shotPrepFrames = 0;
							Renderer.stroke_counter++;
							if(p.distance(Renderer.cuePos) < Renderer.marker_separation_constant/4) { //65f){
								//SHOOT
								System.out.print("SHOOTING: " + Renderer.stroke_counter + "\n");
								Renderer.stroke = true;
								stillFrames = 0;
								missedFrames = 0;
								shotPrepFrames = 0;
							} 
						}
						else {
							Renderer.stroke_counter = 0;
							shotPrepFrames++;
						}
					} else {
						if(shotPrepFrames >= 10) {
							Renderer.stroke_counter = 0;
							stillFrames = 0;
							missedFrames = 0;
							shotPrepFrames = 0;
							Renderer.restPos = null;
							Renderer.statusLabel.setText("Aim...");
						}
						else {
							Renderer.stroke_counter = 0;
							shotPrepFrames++;
						}
					}
				} 

				//compare markers near cue to successive frames
				else {
					boolean success = false;
					for(int x = 0; x < marker_points.size(); x++) {
						if(marker_points.get(x).distance(Renderer.restPos) < (Renderer.marker_separation_constant/4)) {
							success = true;
							break;
						}
					}
					if(success) {
						stillFrames++;
					}
					else {
						missedFrames++;
					}
					if(missedFrames > 3) {
						stillFrames = 0;
						missedFrames = 0;
						Renderer.restPos = null;
					}
				}
			}
		}
	}

	private Point findClosest(ArrayList<Point> marker_points) {
		boolean success = true;
		int closest = -1;
		float distance = 10000f;
		for(int x = 0; x < marker_points.size(); x++) {
			for(int i = x+1; i < marker_points.size(); i++) {
				if(marker_points.get(x).distance(marker_points.get(i)) > (Renderer.marker_separation_constant * 2) + (Renderer.marker_separation_constant/3)) {
					success = false;
					break;
				}
			}
			if(marker_points.get(x).distance(Renderer.cuePos) < distance) {
				distance = (float) marker_points.get(x).distance(Renderer.cuePos);
				closest = x;
			}
			if(!success) {
				break;
			}
		}
		if(success && closest != -1) {
			return marker_points.get(closest);
		} 
		else {
			return null;
		}
	}

	private void findAndDrawCueBall(Mat maskedImage)
	{
		// init
		List<MatOfPoint> contours = new ArrayList<>();
		Mat hierarchy = new Mat();
		
		// find contours
		Imgproc.findContours(maskedImage, contours, hierarchy, Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_NONE);
		
		// if any contour exist...
		if (contours.size() == 1)
		{
			//get bounding rectangle of each contour
			MatOfPoint2f contours_poly = new MatOfPoint2f();
			MatOfPoint2f  NewMtx = new MatOfPoint2f( contours.get(0).toArray() );
			Imgproc.approxPolyDP(NewMtx, contours_poly, 3d, true);
			MatOfPoint  new_poly = new MatOfPoint( contours_poly.toArray() );
			Rect r =  Imgproc.boundingRect(new_poly); 
			
			if((r.width * r.height) > 7500) {
				Moments M = Imgproc.moments(contours.get(0), false);
				int cX = (int) (M.get_m10() / M.get_m00());
				int cY = (int) (M.get_m01() / M.get_m00());
				cueValues.add(new Point(cX, cY));
			}
		}
	}
	
	/**
	 * Stop the acquisition from the camera and release all the resources
	 */
	private void stopAcquisition()
	{
		if (this.timer!=null && !this.timer.isShutdown())
		{
			try
			{
				// stop the timer
				this.timer.shutdown();
				this.timer.awaitTermination(33, TimeUnit.MILLISECONDS);
			}
			catch (InterruptedException e)
			{
				// log any exception
				System.err.println("Exception in stopping the frame capture, trying to release the camera now... " + e);
			}
		}
		
		if (this.capture.isOpened())
		{
			// release the camera
			this.capture.release();
		}
	}
	
	/**
	 * On application close, stop the acquisition from the camera
	 */
	protected void setClosed()
	{
		this.stopAcquisition();
	}
	
}