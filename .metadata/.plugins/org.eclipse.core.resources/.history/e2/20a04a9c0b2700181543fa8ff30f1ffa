package graphics;

import java.awt.Dimension;
import java.awt.Toolkit;

import javax.vecmath.Point2f;
import javax.vecmath.Vector3f;

import com.bulletphysics.linearmath.Transform;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.glu.GLUquadric;

public class EventListener implements GLEventListener{

	private static float DEG2RAD = 3.14159f/180f;
	private static final float RAIL_HEIGHT = 1.40625f;
	private static final float LIGHT_POSITION = 30;
	private static final float CUE_MASS = 567f; //in grams
	private static final float MARKER_SPACING = 0.2f; //in meters
	private static Point2f cuePrevious = new Point2f();
	public static int rotation = 90;
	private static final float[][] COLORS = {
		{1f, 0f, 0f}, 
		{1f, .5f, 0f}, {1f, 0f, 0f},
		{1f, .5f, 0f}, {0.2f, 0.2f, 0.2f}, {1f, 0f, 0f},
		{1f, 0f, 0f}, {1f, .5f, 0f}, {1f, 0f, 0f}, {1f, .5f, 0f},
		{1f, .5f, 0f}, {1f, 0f, 0f}, {1f, .5f, 0f}, {1f, 0f, 0f}, {1f, .5f, 0f}
	};
	
	@Override
	public void display(GLAutoDrawable drawable) {
		
		if(Renderer.stroke) {
			
			double distance = (Renderer.restPos.distance(Renderer.cuePos)/Renderer.marker_separation_constant) * MARKER_SPACING;
			double time = (double)Renderer.stroke_counter / 30d;
			double force = (distance / time) * CUE_MASS;
			double angle = Math.atan2(Renderer.cuePos.y - Renderer.restPos.y, Renderer.cuePos.x - Renderer.restPos.x);
			System.out.print(distance + "\n");
			float force_x = (float)(force * Math.cos(angle));
			float force_z = (float)(force * Math.sin(angle));
			System.out.print("X FORCE: " + force_x + " Z FORCE: " + force_z + " ANGLE:" + angle);
			Renderer.cueBall.activate();
			Renderer.cueBall.applyForce(new Vector3f(force_x, 0, force_z), new Vector3f(0,0,0));
			Renderer.statusLabel.setText("Balls in motion...");
			Renderer.cuePos = null;
			Renderer.restPos = null;
			Renderer.stroke = false;
			Renderer.cueMoving = true;
			Renderer.stroke_counter = 0;
		}
		Renderer.dynamicsWorld.stepSimulation(1/60.f, 10); 
		
		GL2 gl = drawable.getGL().getGL2();
		setCamera(gl, Renderer.glu, 100);
		gl.glLoadIdentity();//important
		
		//setup lighting function
		setLighting(gl);
		gl.glClear(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_DEPTH_BUFFER_BIT);
		

	    Transform trans = new Transform();
	    Renderer.ground[0].getMotionState().getWorldTransform(trans);
		
        //playing area
        drawCube(gl, 60, 0, 26, 120, 2, 52);
        drawCube(gl, 56, 0, 30, 54, 2, 4);
        drawCube(gl, -2, 0, 30, 54, 2, 4);
        drawCube(gl, 56, 0, -26, 54, 2, 4);
        drawCube(gl, -2, 0, -26, 54, 2, 4);
        

        setColor(gl, new float[] {1f, 1f, 1f});
        drawCube(gl, 64, -2, 34, 128, 0, 68);
        
        
        	//sides
		
		// build the sides
        setColor(gl, new float[] {0.36f, 0.25f, 0.20f});
        drawCube(gl, 64, 1, 34, 128, RAIL_HEIGHT, 4);
        drawCube(gl, 64, 1, -30, 128, RAIL_HEIGHT, 4);
        drawCube(gl, 64, 1, 30, 4, RAIL_HEIGHT, 60);
        drawCube(gl, -60, 1, 30, 4, RAIL_HEIGHT, 60);
        
        
        setColor(gl, new float[] {1.0f, 0f, 1.0f});
        
        //set up sphere
        GLUquadric earth = Renderer.glu.gluNewQuadric();
        Renderer.glu.gluQuadricDrawStyle(earth, GLU.GLU_FILL);
        Renderer.glu.gluQuadricNormals(earth, GLU.GLU_FLAT);
        Renderer.glu.gluQuadricOrientation(earth, GLU.GLU_OUTSIDE);
        final float radius = 1.125f;
        final int slices = 150;
        final int stacks = 150;
        
        //cue ball translate
	    Renderer.cueBall.getMotionState().getWorldTransform(trans);
	    
	    //check if cue ball has fallen off the page
        if (trans.origin.y < -2) {
			Renderer.cueBall.translate(new Vector3f(-28 + (0 - trans.origin.x), 1.125f + (0 - trans.origin.y), 0 + (0 - trans.origin.z)));
	    		Renderer.cueBall.clearForces();
	    		Renderer.cueMoving = false;
	    }
        
        //check position if not fallen
	    if(cuePrevious.x == trans.origin.x && cuePrevious.y == trans.origin.z) {
        //if(cuePrevious.distance(new Point2f(trans.origin.x, trans.origin.z)) < .01) { //for inaccurate testing
	    		Renderer.cueMoving = false;
	    } 
	    else {
	    		cuePrevious = new Point2f(trans.origin.x, trans.origin.z);
	    		Renderer.cueMoving = true;
	    }

	    if(!Renderer.cueMoving && Renderer.cuePos == null) {
		    Vector3f[] circleVertices = new Vector3f[37];
		    for (int a = 0; a <= 360; a += 360 / 36)
		    {
		    		
		    		float heading = a * DEG2RAD;
		    		circleVertices[a / (360/ 36)] = new Vector3f((float)Math.cos(heading) * 5.125f, trans.origin.y + 2, (float)Math.sin(heading) * 5.125f);
		    }
		    
		    gl.glBegin(GL.GL_TRIANGLE_FAN);
				gl.glNormal3f(0f, 1f, 0f);
		    		gl.glVertex3f(trans.origin.x, trans.origin.y + 2, trans.origin.z);
				for (int i = 0; i < circleVertices.length; i++) {
					gl.glNormal3f(0f, 1f, 0f);
					gl.glVertex3f(circleVertices[i].x + trans.origin.x, circleVertices[i].y, circleVertices[i].z + trans.origin.z);
				}
			gl.glEnd();
	    }
        setColor(gl, new float[] {1f, 1f, 1f});
        positionBall(gl, earth, radius, slices, stacks, trans.origin.x, trans.origin.y, trans.origin.z);
        
        for(int i = 0; i < 15; i++) {
        		Renderer.balls[i].getMotionState().getWorldTransform(trans);
            setColor(gl, new float[] {COLORS[i][0], COLORS[i][1], COLORS[i][2]});
            positionBall(gl, earth, radius, slices, stacks, trans.origin.x, trans.origin.y, trans.origin.z);
        }
        
        Renderer.glu.gluDeleteQuadric(earth);
	}
	
	@Override
	public void dispose(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub
		Renderer.animator.stop();
		System.exit(0);
	}
	
	@Override
	public void init(GLAutoDrawable drawable) {
		GL2 gl = drawable.getGL().getGL2();
        gl.glShadeModel(GL2.GL_SMOOTH);
		
		gl.glClearColor(0, 0, 0, 1);
		gl.glClearDepthf(1.0f);
		gl.glEnable(GL2.GL_DEPTH_TEST);
        gl.glDepthFunc(GL2.GL_LEQUAL);
        gl.glHint(GL2.GL_PERSPECTIVE_CORRECTION_HINT, GL2.GL_NICEST);	
	}
	
	@Override
	public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {

		
	}
	
	private void setCamera(GL2 gl, GLU glu, float distance) {
        // Change to projection matrix.
        gl.glMatrixMode(GL2.GL_PROJECTION);
        gl.glLoadIdentity();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        float width = (float) screenSize.getWidth();
        float height = (float) screenSize.getHeight();
        // Perspective.
        float widthHeightRatio = width / height;
        glu.gluPerspective(45, widthHeightRatio, 1, 1000);
        glu.gluLookAt(0, distance, 0, 0, 0, 0, 1, 0, 0);
        gl.glRotatef(-rotation, 0.0f, 1.0f, 0.0f);
        // Change back to model view matrix.
        gl.glMatrixMode(GL2.GL_MODELVIEW);
        gl.glLoadIdentity();
    }
	
	private void positionBall(GL2 gl, GLUquadric earth, float radius, int slices, int stacks, float x, float y, float z) {
		 gl.glPushMatrix();
	        gl.glTranslatef(x, y, z);
	        Renderer.glu.gluSphere(earth, radius, slices, stacks);
	    gl.glPopMatrix();
	}
	
	private void setColor(GL2 gl, float[] rgba) {
		gl.glMaterialfv(GL2.GL_FRONT, GL2.GL_AMBIENT, rgba, 0);
        gl.glMaterialfv(GL2.GL_FRONT, GL2.GL_SPECULAR, rgba, 0);
	}
	
	private void drawCube(GL2 gl, float x, float y, float z, float width, float height, float depth) {
		Vector3f n = new Vector3f();
		gl.glBegin(GL2.GL_QUADS);
			
		
		//top square
			n = calculateNormal(new Vector3f(x-width, y, z), new Vector3f(x, y, z), new Vector3f(x-width, y, z-depth));
			gl.glTexCoord2f(0.0f, 1.0f);
			gl.glNormal3f(-n.x, -n.y, -n.z);
			gl.glVertex3f( x, y, z ); // Top Right Of The Quad
			gl.glTexCoord2f(0.0f, 0.0f);
			gl.glNormal3f(-n.x, -n.y, -n.z);
			gl.glVertex3f( x-width, y, z ); // Top Left Of The Quad
			gl.glTexCoord2f(1.0f, 0.0f);
			gl.glNormal3f(-n.x, -n.y, -n.z);
			gl.glVertex3f( x-width, y, z-depth ); // Bottom Left Of The Quad
			gl.glTexCoord2f(1.0f, 1.0f);
			gl.glNormal3f(-n.x, -n.y, -n.z);
			gl.glVertex3f( x, y, z-depth ); // Bottom Right Of The Quad 
				
		
			//back square
			n = calculateNormal(new Vector3f(x, y-height, z-depth), new Vector3f( x-width, y-height, z-depth ), new Vector3f(x-width, y, z-depth));
			gl.glTexCoord2f(0.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y-height, z-depth ); // Bottom Left Of The Quad
			gl.glTexCoord2f(0.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y-height, z-depth ); // Bottom Right Of The Quad
			gl.glTexCoord2f(1.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y, z-depth ); // Top Right Of The Quad (Back)
			gl.glTexCoord2f(1.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y, z-depth ); // Top Left Of The Quad (Back)
			
		
			//left square
			n = calculateNormal(new Vector3f( x-width, y, z), new Vector3f( x-width, y, z-depth), new Vector3f( x-width, y-height, z-depth));
			gl.glTexCoord2f(0.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y, z ); // Top Right Of The Quad (Left)
			gl.glTexCoord2f(0.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y, z-depth ); // Top Left Of The Quad (Left)
			gl.glTexCoord2f(1.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y-height, z-depth ); // Bottom Left Of The Quad
			gl.glTexCoord2f(1.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y-height, z ); // Bottom Right Of The Quad 
			
			
		
			//right square
			n = calculateNormal(new Vector3f(x, y, z-depth), new Vector3f( x, y, z ), new Vector3f( x, y-height, z ));
			gl.glTexCoord2f(0.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y, z-depth ); // Top Right Of The Quad (Right)
			gl.glTexCoord2f(0.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y, z ); // Top Left Of The Quad
			gl.glTexCoord2f(1.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y-height, z ); // Bottom Left Of The Quad
			gl.glTexCoord2f(1.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y-height, z-depth ); // Bottom Right Of The Quad
			
			
			//bottom square
			n = calculateNormal(new Vector3f(x-width, y-height, z), new Vector3f(x, y-height, z), new Vector3f(x-width, y-height, z-depth));
			gl.glTexCoord2f(0.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y-height, z ); // Top Right Of The Quad
			gl.glTexCoord2f(0.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y-height, z ); // Top Left Of The Quad
			gl.glTexCoord2f(1.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x-width, y-height, z-depth ); // Bottom Left Of The Quad
			gl.glTexCoord2f(1.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f( x, y-height, z-depth ); // Bottom Right Of The Quad 
			
			
			//front square
			n = calculateNormal(new Vector3f(x-width, y-height, z), new Vector3f(x, y-height, z), new Vector3f(x, y, z));
			gl.glTexCoord2f(0.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f(x-width, y-height, z);
			gl.glTexCoord2f(0.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f(x, y-height, z);
			gl.glTexCoord2f(1.0f, 0.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f(x, y, z);
			gl.glTexCoord2f(1.0f, 1.0f);
			gl.glNormal3f(n.x, n.y, n.z);
			gl.glVertex3f(x-width, y, z);
				
		gl.glEnd();
	}
	
	private void setLighting(GL2 gl) {
		// Draw sphere (possible styles: FILL, LINE, POINT).
		// Prepare light parameters.
        float SHINE_ALL_DIRECTIONS = 1;
        float[] lightPos = {0, LIGHT_POSITION, 0, SHINE_ALL_DIRECTIONS};
        float[] lightColorAmbient = {0.2f, 0.2f, 0.2f, 1f};
        float[] lightColorSpecular = {0.8f, 0.8f, 0.8f, 1f};

        // Set light parameters.
        gl.glLightfv(GL2.GL_LIGHT1, GL2.GL_POSITION, lightPos, 0);
        gl.glLightfv(GL2.GL_LIGHT1, GL2.GL_AMBIENT, lightColorAmbient, 0);
        gl.glLightfv(GL2.GL_LIGHT1, GL2.GL_SPECULAR, lightColorSpecular, 0);

        // Enable lighting in GL.
        gl.glEnable(GL2.GL_LIGHT1);
        gl.glEnable(GL2.GL_LIGHTING);

        // Set material properties.
        //setColor(gl, new float[] { 0.137255f, 0.556863f, 0.137255f});
        setColor(gl, new float[] {0, 0, 0});
        gl.glMaterialf(GL2.GL_FRONT, GL2.GL_SHININESS, 0.5f);
	}
	
	private static Vector3f calculateNormal(Vector3f v0, Vector3f v1, Vector3f v2) {
	    Vector3f u = new Vector3f();
	    u.sub(v2, v0);
	    Vector3f w = new Vector3f();
	    w.sub(v1, v0);

	    Vector3f n = new Vector3f();
	    n.cross(u, w);
	    n.normalize(n);

	    if (Float.isNaN(n.x) || Float.isNaN(n.y) || Float.isNaN(n.z)) {
	        return new Vector3f(0,1,0);
	    }

	    return n;
	}
}
